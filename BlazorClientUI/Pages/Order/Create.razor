@page "/Order/Create"
@inject NavigationManager navManager
@inject HttpClient Http
<h3>Create</h3>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <h4>@errorMessage</h4>
}
else if (foodItems.Count == 0)
{
    <h4>Loading the page...</h4>
}
else
{
    <EditForm Model="order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="order" />
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            <select @onchange="FoodItemChange" class="form-control">
                <option value="">Select a meal...</option>
                @foreach (var item in foodItems)
                {
                    <option value="@item.Id">@item.Title</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber @bind-Value="order.Quantity" class="form-control" />
            <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
        </div>
        <div class="form-group">
            <label class="control-label">Name for the Order</label>
            <InputText @bind-Value="order.OrderName" class="form-control" />
            <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" value="Order Food" class="btn btn-primary" />
        </div>
    </EditForm>
}

@code {
    private List<FoodModel> foodItems = new List<FoodModel>();
    private OrderModel order = new OrderModel();
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("/Api/Food/");

        if (response.IsSuccessStatusCode == true)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            errorMessage = response.ReasonPhrase;
        }
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = foodItems.Where(x => x.Id == order.FoodId).First().Price * order.Quantity;

        try
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync("/Api/Order", order); //Creating order and getting id back
            var contents = await response.Content.ReadFromJsonAsync<OrderCreateResultModel>();

            order = new OrderModel();
            navManager.NavigateTo($"/Order/Display/{contents.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

    }
}
