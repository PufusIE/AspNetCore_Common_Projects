@page "/Order/Create"
@inject IOrderData orderData
@inject IFoodData foodData
@inject NavigationManager navManager

<h3>Create</h3>

<EditForm Model="order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="order" />
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @onchange="FoodItemChange" class="form-control">
            <option value="">Select a meal...</option>
            @foreach (var item in foodItems)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="order.Quantity" class="form-control" />
        <ValidationMessage For="@(() => order.Quantity)" class="text-danger"/>
    </div>
    <div class="form-group">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="order.OrderName" class="form-control" />
        <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary" />
    </div>
</EditForm>



@code {
    private List<FoodModel> foodItems = new List<FoodModel>();
    private OrderModel order = new OrderModel();

    protected override async Task OnParametersSetAsync()
    {
        foodItems = await foodData.GetAllMeals();
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }
    }

    private async void HandleValidSubmit()
    {
        order.Total = foodItems.Where(x => x.Id == order.FoodId).First().Price * order.Quantity;

        var id = await orderData.CreateOrder(order);

        navManager.NavigateTo($"/Order/Display/{id}");
    }
}
